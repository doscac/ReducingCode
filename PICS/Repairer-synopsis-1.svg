<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.40.1 (20161225.0304)
 -->
<!-- Title: %3 Pages: 1 -->
<svg width="461pt" height="585pt"
 viewBox="0.00 0.00 460.50 585.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 581)">
<title>%3</title>
<g id="a_graph0"><a xlink:title="Repairer class hierarchy">
<polygon fill="#ffffff" stroke="transparent" points="-4,4 -4,-581 456.5,-581 456.5,4 -4,4"/>
</a>
</g>
<!-- Repairer -->
<g id="node1" class="node">
<title>Repairer</title>
<g id="a_node1"><a xlink:href="#" xlink:title="class Repairer">
<polygon fill="none" stroke="#000000" points="0,-.5 0,-218.5 137,-218.5 137,-.5 0,-.5"/>
<text text-anchor="start" x="39.5" y="-204.3" font-family="Raleway, Helvetica, Arial, sans-serif" font-weight="bold" font-size="14.00" fill="#6a0dad">Repairer</text>
<polyline fill="none" stroke="#000000" points="0,-195.5 137,-195.5 "/>
<g id="a_node1_0"><a xlink:href="#" xlink:title="Repairer">
<g id="a_node1_1"><a xlink:href="#" xlink:title="__init__(self, debugger, targets=None, sources=None, log=False, mutator_class=&lt;class &#39;__main__.StatementMutator&#39;&gt;, crossover_class=&lt;class &#39;__main__.CrossoverOperator&#39;&gt;, reducer_class=&lt;class &#39;DeltaDebugger.DeltaDebugger&#39;&gt;, globals=None):&#10; &#160;&#160;&#160;Constructor.&#10; &#160;&#160;&#160;`debugger`: a `DifferenceDebugger` to take tests and coverage from.&#10; &#160;&#160;&#160;`targets`: a list of functions/modules to be repaired.&#10; &#160;&#160;&#160;(default: the covered functions in `debugger`, except tests)&#10; &#160;&#160;&#160;`sources`: a list of functions/modules to take repairs from.&#10; &#160;&#160;&#160;(default: same as `targets`)&#10; &#160;&#160;&#160;`globals`: if given, a `globals()` dict for executing targets&#10; &#160;&#160;&#160;(default: `globals()` of caller)&#10; &#160;&#160;&#160;">
<text text-anchor="start" x="8.5" y="-184" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00" fill="#000000">__init__()</text>
</a>
</g>
<g id="a_node1_2"><a xlink:href="#" xlink:title="default_functions(self):&#10; &#160;&#160;&#160;Return the set of functions to be repaired.&#10; &#160;&#160;&#160;Functions whose names start or end in `test` are excluded.">
<text text-anchor="start" x="8.5" y="-173" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00" fill="#000000">default_functions()</text>
</a>
</g>
<g id="a_node1_3"><a xlink:href="#" xlink:title="evolve(self, population):&#10; &#160;&#160;&#160;Evolve the candidate population by mutating and crossover.">
<text text-anchor="start" x="8.5" y="-162" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00" fill="#000000">evolve()</text>
</a>
</g>
<g id="a_node1_4"><a xlink:href="#" xlink:title="fitness(self, tree):&#10; &#160;&#160;&#160;Test `tree`, returning its fitness">
<text text-anchor="start" x="8.5" y="-151" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00" fill="#000000">fitness()</text>
</a>
</g>
<g id="a_node1_5"><a xlink:href="#" xlink:title="fitness_key(self, tree):&#10; &#160;&#160;&#160;Key to be used for sorting the population">
<text text-anchor="start" x="8.5" y="-140" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00" fill="#000000">fitness_key()</text>
</a>
</g>
<g id="a_node1_6"><a xlink:href="#" xlink:title="getsource(self, item):&#10; &#160;&#160;&#160;Get the source for `item`. Can also be a string.">
<text text-anchor="start" x="8.5" y="-129" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00" fill="#000000">getsource()</text>
</a>
</g>
<g id="a_node1_7"><a xlink:href="#" xlink:title="initial_population(self, size):&#10; &#160;&#160;&#160;Return an initial population of size `size`">
<text text-anchor="start" x="8.5" y="-118" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00" fill="#000000">initial_population()</text>
</a>
</g>
<g id="a_node1_8"><a xlink:href="#" xlink:title="log_tree(self, description, tree):&#10; &#160;&#160;&#160;Print out `tree` as source code prefixed by `description`.">
<text text-anchor="start" x="8.5" y="-107" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00" fill="#000000">log_tree()</text>
</a>
</g>
<g id="a_node1_9"><a xlink:href="#" xlink:title="parse(self, items):&#10; &#160;&#160;&#160;Read in a set of items into a single tree">
<text text-anchor="start" x="8.5" y="-96" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00" fill="#000000">parse()</text>
</a>
</g>
<g id="a_node1_10"><a xlink:href="#" xlink:title="reduce(self, tree):&#10; &#160;&#160;&#160;Simplify `tree` using delta debugging.">
<text text-anchor="start" x="8.5" y="-85" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00" fill="#000000">reduce()</text>
</a>
</g>
<g id="a_node1_11"><a xlink:href="#" xlink:title="repair(self, population_size=40, iterations=100):&#10; &#160;&#160;&#160;Repair the function we collected test runs from.&#10; &#160;&#160;&#160;Use a population size of `population_size` and&#10; &#160;&#160;&#160;at most `iterations` iterations.&#10; &#160;&#160;&#160;Returns the AST of the repaired function.">
<text text-anchor="start" x="8.5" y="-74" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00" fill="#000000">repair()</text>
</a>
</g>
<g id="a_node1_12"><a xlink:href="#" xlink:title="run_test_set(self, test_set, validate=False):&#10; &#160;&#160;&#160;Run given `test_set`&#10; &#160;&#160;&#160;(`DifferenceDebugger.PASS` or `DifferenceDebugger.FAIL`).&#10; &#160;&#160;&#160;If `validate` is set, check expectations.&#10; &#160;&#160;&#160;Return number of passed tests.">
<text text-anchor="start" x="8.5" y="-63" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00" fill="#000000">run_test_set()</text>
</a>
</g>
<g id="a_node1_13"><a xlink:href="#" xlink:title="run_tests(self, validate=False):&#10; &#160;&#160;&#160;Run passing and failing tests, returning weighted fitness.">
<text text-anchor="start" x="8.5" y="-52" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00" fill="#000000">run_tests()</text>
</a>
</g>
<g id="a_node1_14"><a xlink:href="#" xlink:title="test_reduce(self, source_lines, original_fitness):&#10; &#160;&#160;&#160;Test function for delta debugging.">
<text text-anchor="start" x="8.5" y="-41" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00" fill="#000000">test_reduce()</text>
</a>
</g>
<g id="a_node1_15"><a xlink:href="#" xlink:title="toplevel_defs(self, tree):&#10; &#160;&#160;&#160;Return a list of defined functions and classes in `tree`">
<text text-anchor="start" x="8.5" y="-30" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00" fill="#000000">toplevel_defs()</text>
</a>
</g>
<g id="a_node1_16"><a xlink:href="#" xlink:title="weight(self, test_set):&#10; &#160;&#160;&#160;Return the weight of `test_set`&#10; &#160;&#160;&#160;(`DifferenceDebugger.PASS` or `DifferenceDebugger.FAIL`).&#10; &#160;&#160;&#160;">
<text text-anchor="start" x="8.5" y="-19" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00" fill="#000000">weight()</text>
</a>
</g>
<g id="a_node1_17"><a xlink:href="#" xlink:title="validate(self)">
<text text-anchor="start" x="8.5" y="-7" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">validate()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- ConditionMutator -->
<g id="node2" class="node">
<title>ConditionMutator</title>
<g id="a_node2"><a xlink:href="#" xlink:title="class ConditionMutator">
<polygon fill="none" stroke="#000000" points="155,-72 155,-147 290,-147 290,-72 155,-72"/>
<text text-anchor="start" x="163" y="-132.8" font-family="Raleway, Helvetica, Arial, sans-serif" font-weight="bold" font-size="14.00" fill="#6a0dad">ConditionMutator</text>
<polyline fill="none" stroke="#000000" points="155,-124 290,-124 "/>
<g id="a_node2_18"><a xlink:href="#" xlink:title="ConditionMutator">
<g id="a_node2_19"><a xlink:href="#" xlink:title="__init__(self, *args, **kwargs):&#10; &#160;&#160;&#160;Constructor">
<text text-anchor="start" x="168.5" y="-113" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00" fill="#000000">__init__()</text>
</a>
</g>
<g id="a_node2_20"><a xlink:href="#" xlink:title="choose_condition(self):&#10; &#160;&#160;&#160;Return a random condition from source.">
<text text-anchor="start" x="168.5" y="-102" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00" fill="#000000">choose_condition()</text>
</a>
</g>
<g id="a_node2_21"><a xlink:href="#" xlink:title="swap(self, node):&#10; &#160;&#160;&#160;Replace `node` condition by a condition from `source`">
<text text-anchor="start" x="168.5" y="-91" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00" fill="#000000">swap()</text>
</a>
</g>
<g id="a_node2_22"><a xlink:href="#" xlink:title="choose_bool_op(self)">
<text text-anchor="start" x="168.5" y="-79" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">choose_bool_op()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- StatementMutator -->
<g id="node3" class="node">
<title>StatementMutator</title>
<g id="a_node3"><a xlink:href="#" xlink:title="class StatementMutator">
<polygon fill="none" stroke="#000000" points="151,-255.5 151,-407.5 294,-407.5 294,-255.5 151,-255.5"/>
<text text-anchor="start" x="160" y="-393.3" font-family="Raleway, Helvetica, Arial, sans-serif" font-weight="bold" font-size="14.00" fill="#6a0dad">StatementMutator</text>
<polyline fill="none" stroke="#000000" points="151,-384.5 294,-384.5 "/>
<g id="a_node3_23"><a xlink:href="#" xlink:title="StatementMutator">
<g id="a_node3_24"><a xlink:href="#" xlink:title="__init__(self, suspiciousness_func=None, source=None, log=False):&#10; &#160;&#160;&#160;Constructor.&#10; &#160;&#160;&#160;`suspiciousness_func` is a function that takes a location&#10; &#160;&#160;&#160;(function, line_number) and returns a suspiciousness value&#10; &#160;&#160;&#160;between 0 and 1.0. If not given, all locations get the&#10; &#160;&#160;&#160;same suspiciousness of 1.0.&#10; &#160;&#160;&#160;`source` is a list of statements to choose from.&#10; &#160;&#160;&#160;">
<text text-anchor="start" x="159.5" y="-373" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00" fill="#000000">__init__()</text>
</a>
</g>
<g id="a_node3_25"><a xlink:href="#" xlink:title="delete(self, node):&#10; &#160;&#160;&#160;Delete `node`.">
<text text-anchor="start" x="159.5" y="-362" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00" fill="#000000">delete()</text>
</a>
</g>
<g id="a_node3_26"><a xlink:href="#" xlink:title="format_node(self, node):&#10; &#160;&#160;&#160;Return a string representation for `node`.">
<text text-anchor="start" x="159.5" y="-351" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00" fill="#000000">format_node()</text>
</a>
</g>
<g id="a_node3_27"><a xlink:href="#" xlink:title="insert(self, node):&#10; &#160;&#160;&#160;Insert a random node from `source` after `node`">
<text text-anchor="start" x="159.5" y="-340" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00" fill="#000000">insert()</text>
</a>
</g>
<g id="a_node3_28"><a xlink:href="#" xlink:title="mutate(self, tree):&#10; &#160;&#160;&#160;Mutate the given AST `tree` in place. Return mutated tree.">
<text text-anchor="start" x="159.5" y="-329" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00" fill="#000000">mutate()</text>
</a>
</g>
<g id="a_node3_29"><a xlink:href="#" xlink:title="swap(self, node):&#10; &#160;&#160;&#160;Replace `node` with a random node from `source`">
<text text-anchor="start" x="159.5" y="-318" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00" fill="#000000">swap()</text>
</a>
</g>
<g id="a_node3_30"><a xlink:href="#" xlink:title="choose_op(self)">
<text text-anchor="start" x="159.5" y="-306" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">choose_op()</text>
</a>
</g>
<g id="a_node3_31"><a xlink:href="#" xlink:title="choose_statement(self)">
<text text-anchor="start" x="159.5" y="-295" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">choose_statement()</text>
</a>
</g>
<g id="a_node3_32"><a xlink:href="#" xlink:title="node_suspiciousness(self, stmt, func_name)">
<text text-anchor="start" x="159.5" y="-284" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">node_suspiciousness()</text>
</a>
</g>
<g id="a_node3_33"><a xlink:href="#" xlink:title="node_to_be_mutated(self, tree)">
<text text-anchor="start" x="159.5" y="-273" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">node_to_be_mutated()</text>
</a>
</g>
<g id="a_node3_34"><a xlink:href="#" xlink:title="visit(self, node)">
<text text-anchor="start" x="159.5" y="-262" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">visit()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- ConditionMutator&#45;&gt;StatementMutator -->
<g id="edge1" class="edge">
<title>ConditionMutator&#45;&gt;StatementMutator</title>
<path fill="none" stroke="#000000" d="M222.5,-147.1593C222.5,-173.9533 222.5,-211.067 222.5,-244.9742"/>
<polygon fill="none" stroke="#000000" points="219.0001,-245.3792 222.5,-255.3793 226.0001,-245.3793 219.0001,-245.3792"/>
</g>
<!-- NodeTransformer -->
<g id="node4" class="node">
<title>NodeTransformer</title>
<g id="a_node4"><a xlink:href="ast.ipynb" xlink:title="class NodeTransformer:&#10; &#160;&#160;&#160;&#10; &#160;&#160;&#160;A :class:`NodeVisitor` subclass that walks the abstract syntax tree and&#10; &#160;&#160;&#160;allows modification of nodes.&#10; &#160;&#160;&#160;&#10; &#160;&#160;&#160;The `NodeTransformer` will walk the AST and use the return value of the&#10; &#160;&#160;&#160;visitor methods to replace or remove the old node. &#160;If the return value of&#10; &#160;&#160;&#160;the visitor method is ``None``, the node will be removed from its location,&#10; &#160;&#160;&#160;otherwise it is replaced with the return value. &#160;The return value may be the&#10; &#160;&#160;&#160;original node in which case no replacement takes place.&#10; &#160;&#160;&#160;&#10; &#160;&#160;&#160;Here is an example transformer that rewrites all occurrences of name lookups&#10; &#160;&#160;&#160;(``foo``) to ``data[&#39;foo&#39;]``::&#10; &#160;&#160;&#160;&#10; &#160;&#160;&#160;class RewriteName(NodeTransformer):&#10; &#160;&#160;&#160;&#10; &#160;&#160;&#160;def visit_Name(self, node):&#10; &#160;&#160;&#160;return copy_location(Subscript(&#10; &#160;&#160;&#160;value=Name(id=&#39;data&#39;, ctx=Load()),&#10; &#160;&#160;&#160;slice=Index(value=Str(s=node.id)),&#10; &#160;&#160;&#160;ctx=node.ctx&#10; &#160;&#160;&#160;), node)&#10; &#160;&#160;&#160;&#10; &#160;&#160;&#160;Keep in mind that if the node you&#39;re operating on has child nodes you must&#10; &#160;&#160;&#160;either transform the child nodes yourself or call the :meth:`generic_visit`&#10; &#160;&#160;&#160;method for the node first.&#10; &#160;&#160;&#160;&#10; &#160;&#160;&#160;For nodes that were part of a collection of statements (that applies to all&#10; &#160;&#160;&#160;statement nodes), the visitor may also return a list of nodes rather than&#10; &#160;&#160;&#160;just a single node.&#10; &#160;&#160;&#160;&#10; &#160;&#160;&#160;Usually you use the transformer like this::&#10; &#160;&#160;&#160;&#10; &#160;&#160;&#160;node = YourTransformer().visit(node)&#10; &#160;&#160;&#160;">
<polygon fill="none" stroke="#000000" points="154.5,-444.5 154.5,-486.5 290.5,-486.5 290.5,-444.5 154.5,-444.5"/>
<text text-anchor="start" x="162.5" y="-472.3" font-family="Raleway, Helvetica, Arial, sans-serif" font-weight="bold" font-size="14.00" fill="#6a0dad">NodeTransformer</text>
<polyline fill="none" stroke="#000000" points="154.5,-463.5 290.5,-463.5 "/>
<g id="a_node4_35"><a xlink:href="#" xlink:title="NodeTransformer">
<g id="a_node4_36"><a xlink:href="ast.ipynb" xlink:title="generic_visit(self, node)">
<text text-anchor="start" x="177.5" y="-451" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">generic_visit()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- StatementMutator&#45;&gt;NodeTransformer -->
<g id="edge2" class="edge">
<title>StatementMutator&#45;&gt;NodeTransformer</title>
<path fill="none" stroke="#000000" d="M222.5,-407.505C222.5,-416.9517 222.5,-426.1551 222.5,-434.3456"/>
<polygon fill="none" stroke="#000000" points="219.0001,-434.4646 222.5,-444.4647 226.0001,-434.4647 219.0001,-434.4646"/>
</g>
<!-- NodeVisitor -->
<g id="node5" class="node">
<title>NodeVisitor</title>
<g id="a_node5"><a xlink:href="ast.ipynb" xlink:title="class NodeVisitor:&#10; &#160;&#160;&#160;&#10; &#160;&#160;&#160;A node visitor base class that walks the abstract syntax tree and calls a&#10; &#160;&#160;&#160;visitor function for every node found. &#160;This function may return a value&#10; &#160;&#160;&#160;which is forwarded by the `visit` method.&#10; &#160;&#160;&#160;&#10; &#160;&#160;&#160;This class is meant to be subclassed, with the subclass adding visitor&#10; &#160;&#160;&#160;methods.&#10; &#160;&#160;&#160;&#10; &#160;&#160;&#160;Per default the visitor functions for the nodes are ``&#39;visit_&#39;`` +&#10; &#160;&#160;&#160;class name of the node. &#160;So a `TryFinally` node visit function would&#10; &#160;&#160;&#160;be `visit_TryFinally`. &#160;This behavior can be changed by overriding&#10; &#160;&#160;&#160;the `visit` method. &#160;If no visitor function exists for a node&#10; &#160;&#160;&#160;(return value `None`) the `generic_visit` visitor is used instead.&#10; &#160;&#160;&#160;&#10; &#160;&#160;&#160;Don&#39;t use the `NodeVisitor` if you want to apply changes to nodes during&#10; &#160;&#160;&#160;traversing. &#160;For this a special visitor exists (`NodeTransformer`) that&#10; &#160;&#160;&#160;allows modifications.&#10; &#160;&#160;&#160;">
<polygon fill="none" stroke="#000000" points="169,-523.5 169,-576.5 276,-576.5 276,-523.5 169,-523.5"/>
<text text-anchor="start" x="182.5" y="-562.3" font-family="Raleway, Helvetica, Arial, sans-serif" font-weight="bold" font-size="14.00" fill="#6a0dad">NodeVisitor</text>
<polyline fill="none" stroke="#000000" points="169,-553.5 276,-553.5 "/>
<g id="a_node5_37"><a xlink:href="#" xlink:title="NodeVisitor">
<g id="a_node5_38"><a xlink:href="ast.ipynb" xlink:title="generic_visit(self, node):&#10; &#160;&#160;&#160;Called if no explicit visitor function exists for a node.">
<text text-anchor="start" x="177.5" y="-542.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00" fill="#000000">generic_visit()</text>
</a>
</g>
<g id="a_node5_39"><a xlink:href="ast.ipynb" xlink:title="visit(self, node):&#10; &#160;&#160;&#160;Visit a node.">
<text text-anchor="start" x="177.5" y="-531.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00" fill="#000000">visit()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- NodeTransformer&#45;&gt;NodeVisitor -->
<g id="edge3" class="edge">
<title>NodeTransformer&#45;&gt;NodeVisitor</title>
<path fill="none" stroke="#000000" d="M222.5,-486.8229C222.5,-494.7647 222.5,-504.0263 222.5,-512.9709"/>
<polygon fill="none" stroke="#000000" points="219.0001,-513.2274 222.5,-523.2274 226.0001,-513.2274 219.0001,-513.2274"/>
</g>
<!-- CrossoverOperator -->
<g id="node6" class="node">
<title>CrossoverOperator</title>
<g id="a_node6"><a xlink:href="#" xlink:title="class CrossoverOperator">
<polygon fill="none" stroke="#000000" points="308.5,-61 308.5,-158 452.5,-158 452.5,-61 308.5,-61"/>
<text text-anchor="start" x="316.5" y="-143.8" font-family="Raleway, Helvetica, Arial, sans-serif" font-weight="bold" font-size="14.00" fill="#6a0dad">CrossoverOperator</text>
<polyline fill="none" stroke="#000000" points="308.5,-135 452.5,-135 "/>
<g id="a_node6_40"><a xlink:href="#" xlink:title="CrossoverOperator">
<g id="a_node6_41"><a xlink:href="#" xlink:title="cross_bodies(self, body_1, body_2):&#10; &#160;&#160;&#160;CrossoverOperator the statement lists `body_1` x `body_2`.&#10; &#160;&#160;&#160;Return new lists.&#10; &#160;&#160;&#160;">
<text text-anchor="start" x="320.5" y="-124" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00" fill="#000000">cross_bodies()</text>
</a>
</g>
<g id="a_node6_42"><a xlink:href="#" xlink:title="crossover(self, t1, t2):&#10; &#160;&#160;&#160;Do a crossover of ASTs `t1` and `t2`.&#10; &#160;&#160;&#160;Raises `CrossoverError` if no crossover is found.">
<text text-anchor="start" x="320.5" y="-113" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00" fill="#000000">crossover()</text>
</a>
</g>
<g id="a_node6_43"><a xlink:href="#" xlink:title="crossover_attr(self, t1, t2, body_attr):&#10; &#160;&#160;&#160;CrossoverOperator the bodies `body_attr` of two trees `t1` and `t2`.&#10; &#160;&#160;&#160;Return True if successful.">
<text text-anchor="start" x="320.5" y="-102" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00" fill="#000000">crossover_attr()</text>
</a>
</g>
<g id="a_node6_44"><a xlink:href="#" xlink:title="crossover_branches(self, t1, t2):&#10; &#160;&#160;&#160;Special case:&#10; &#160;&#160;&#160;`t1` = `if P: S1 else: S2` x `t2` = `if P&#39;: S1&#39; else: S2&#39;`&#10; &#160;&#160;&#160;becomes&#10; &#160;&#160;&#160;`t1` = `if P: S2&#39; else: S1&#39;` and `t2` = `if P&#39;: S2 else: S1`&#10; &#160;&#160;&#160;Returns True if successful.&#10; &#160;&#160;&#160;">
<text text-anchor="start" x="320.5" y="-91" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00" fill="#000000">crossover_branches()</text>
</a>
</g>
<g id="a_node6_45"><a xlink:href="#" xlink:title="__init__(self, log=False)">
<text text-anchor="start" x="320.5" y="-79" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">__init__()</text>
</a>
</g>
<g id="a_node6_46"><a xlink:href="#" xlink:title="can_cross(self, tree, body_attr=&#39;body&#39;)">
<text text-anchor="start" x="320.5" y="-68" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">can_cross()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
</g>
</svg>
